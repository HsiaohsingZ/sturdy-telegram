library(dplyr)
library(purrr)
library(broom)
imputed5$Fasciotomy <- factor(imputed5$Fasciotomy, levels = c(0, 1), labels = c("NFT-Group", "FT-Group"))
continuous_vars <- c("Age", "BMI", "Prehospital_Time", "WBC", "NEU", "LYM", 
                     "MON", "EOS", "BAS", "RBC", "HGB", "HCT", "PLT", "INR", 
                     "PT", "APTT", "FIB", "TT", "D_dimer", "ATⅢ", "TP", "ALB", 
                     "GLOB", "ALT", "AST", "ALP", "GGTγ", "CHE", "CK", 
                     "CKMB", "LDH", "TG", "Na", "K", "Cl", "TCO2", "GLU", 
                     "UREA", "CREA", "OSM", "UA", "Ca", "NLR", "PLR", "MLR", 
                     "SII", "SIRI", "MESS")
categorical_vars <- c("Gender", "Smoking", "Drinking", "Hypertension", 
                      "Diabetes", "Stroke", "Injury_Cause", "Injury_Side", 
                      "Injured_Arteries", "Limb_Ischemia", "ASA_Class", 
                      "Collateral_Circulation", "Injury_Energy", 
                      "Fracture_or_Dislocation", "Multiple_Fractures", 
                      "Blister", "Crush_Injury", "Degloving_or_Open_Injury", 
                      "Nerve_injury", "Venous_Injury", "LEDVT", "Shock")
generate_stats_table <- function(data, group_var, continuous_vars, categorical_vars) {
  result_imputed5 <- data.frame(Variable = character(),
                                Type = character(),
                                Total_Summary = character(),
                                FT_Summary = character(),
                                NFT_Summary = character(),
                                P_Value = numeric(),
                                stringsAsFactors = FALSE)
  continuous_results <- map_df(continuous_vars, function(var) {
    shapiro_p <- shapiro.test(data[[var]])$p.value
    total_mean <- mean(data[[var]], na.rm = TRUE)
    total_sd <- sd(data[[var]], na.rm = TRUE)
    total_median <- median(data[[var]], na.rm = TRUE)
    total_iqr <- IQR(data[[var]], na.rm = TRUE)
    group_stats <- data %>%
      group_by(!!sym(group_var)) %>%
      summarise(
        Mean = mean(!!sym(var), na.rm = TRUE),
        SD = sd(!!sym(var), na.rm = TRUE),
        Median = median(!!sym(var), na.rm = TRUE),
        IQR = IQR(!!sym(var), na.rm = TRUE),
        .groups = 'drop')
    if (shapiro_p > 0.05) {
      test <- t.test(as.formula(paste(var, "~", group_var)), data = data)
      method <- "t-test"
    } else {
      test <- wilcox.test(as.formula(paste(var, "~", group_var)), data = data)
      method <- "Mann-Whitney"}
    data.frame(
      Variable = var,
      Type = "Continuous",
      Total_Summary = sprintf("%.1f ± %.1f / %.1f [%.1f-%.1f]", 
                              total_mean, total_sd, total_median, 
                              total_median - total_iqr/2, total_median + total_iqr/2),
      FT_Summary = sprintf("%.1f ± %.1f / %.1f [%.1f-%.1f]", 
                           group_stats$Mean[1], group_stats$SD[1], 
                           group_stats$Median[1], 
                           group_stats$Median[1] - group_stats$IQR[1]/2,
                           group_stats$Median[1] + group_stats$IQR[1]/2),
      NFT_Summary = sprintf("%.1f ± %.1f / %.1f [%.1f-%.1f]", 
                            group_stats$Mean[2], group_stats$SD[2], 
                            group_stats$Median[2], 
                            group_stats$Median[2] - group_stats$IQR[2]/2,
                            group_stats$Median[2] + group_stats$IQR[2]/2),
      P_Value = test$p.value,
      Method = method,
      stringsAsFactors = FALSE)})
  categorical_results <- map_df(categorical_vars, function(var) {
    total_tab <- table(data[[var]])
    total_prop <- prop.table(total_tab) * 100
    group_tab <- table(data[[var]], data[[group_var]])
    group_prop <- prop.table(group_tab, margin = 2) * 100
    if (any(group_tab < 5)) {
      test <- fisher.test(group_tab)
      method <- "Fisher's exact"
    } else {
      test <- chisq.test(group_tab)
      method <- "Chi-square"}
    data.frame(
      Variable = var,
      Type = "Categorical",
      Total_Summary = paste(paste0(names(total_tab), ": ", total_tab, " (", round(total_prop, 1), "%)"), collapse = "; "),
      FT_Summary = paste(paste0(rownames(group_tab), ": ", group_tab[,1], " (", round(group_prop[,1], 1), "%)"), collapse = "; "),
      NFT_Summary = paste(paste0(rownames(group_tab), ": ", group_tab[,2], " (", round(group_prop[,2], 1), "%)"), collapse = "; "),
      P_Value = test$p.value,
      Method = method,
      stringsAsFactors = FALSE)})
  bind_rows(continuous_results, categorical_results) %>%
    mutate(P_Value = round(P_Value, 4),
           P_Value = ifelse(P_Value < 0.001, "<0.001", as.character(P_Value))) %>%
    select(Variable, Type, Total_Summary, FT_Summary, NFT_Summary, P_Value, Method)}

library(tidyverse)
library(dplyr)
factor_vars <- c("Injury_Cause")
binary_vars <- c("Gender", "Smoking", "Drinking", "Hypertension", "Diabetes", "Stroke", 
                 "Injury_Side", "Fracture_or_Dislocation", "Multiple_Fractures", "Blister", 
                 "Crush_Injury", "Degloving_or_Open_Injury", "Nerve_injury", 
                 "Venous_Injury", "LEDVT", "Collateral_Circulation", "Fasciotomy")
ordered_vars <- c("Limb_Ischemia", "Injury_Energy", "Shock", "ASA_Class")
imputed5 <- imputed5 %>%
  mutate(across(all_of(factor_vars), as.factor)) %>%
  mutate(across(all_of(binary_vars), as.numeric)) %>%
  mutate(across(all_of(ordered_vars), as.numeric))
str(imputed5)
if (!require(skimr)) install.packages("skimr")
library(skimr)
skim(imputed5)

library(glmnet)
install.packages("pROC")
library(pROC)
library(ggplot2)
X <- model.matrix(~ . - Patient_ID - 1,
                  data = imputed5[, !colnames(imputed5) %in% "Fasciotomy"])
y <- imputed5$Fasciotomy
X_filtered <- X[, apply(X, 2, var) > 0]
X_scaled <- scale(X_filtered)
set.seed(123)
lasso_model <- cv.glmnet(X_scaled, y, family = "binomial",
                         alpha = 1, nfolds = 10,
                         type.measure = "deviance")
lambda_opt <- lasso_model$lambda.1se
selected_vars <- coef(lasso_model, s = "lambda.1se") %>%
  as.matrix() %>%
  .[which(. != 0), ] %>%
  names() %>%
  setdiff("(Intercept)")
print("LASSO selected vars:")
print(selected_vars)
boot_selected_vars <- replicate(100, {
  sample_idx <- sample(nrow(X), replace = TRUE)
  fit <- glmnet(X[sample_idx, ], y[sample_idx], alpha = 1)
  selected_coef <- coef(fit, s = lasso_model$lambda.min)
  selected_vars <- rownames(selected_coef)[which(selected_coef != 0)]
  selected_vars[selected_vars != "(Intercept)"]})
var_freq <- table(unlist(boot_selected_vars))
print(sort(var_freq, decreasing = TRUE))
par(mar = c(5, 5, 5, 2) + 0.1,
    mgp = c(3, 1, 0),
    cex.lab = 1.2,
    cex.axis = 1.1)
plot(lasso_model$glmnet.fit, 
     xvar = "lambda", 
     label = FALSE)
abline(v = log(lambda_opt), col = "#CC0000", lty = 2)
plot(lasso_model)
abline(v = log(lambda_opt), col = "#CC0000", lty = 2)
if (length(selected_vars) > 4) {
  coef_values <- coef(lasso_model, s = "lambda.1se")[selected_vars, ] %>% abs()
  final_vars <- names(sort(coef_values, decreasing = TRUE))[1:4]
} else {final_vars <- selected_vars}
imputed5$K_CK_interaction <- imputed5$K * imputed5$CK
imputed5$Limb_Ischemia_NEU_interaction <- imputed5$Limb_Ischemia * imputed5$NEU
imputed5$K_Limb_Ischemia_interaction <- imputed5$K * imputed5$Limb_Ischemia

formula <- Fasciotomy ~ Limb_Ischemia + K + CK + NEU + K_CK_interaction + Limb_Ischemia_NEU_interaction + K_Limb_Ischemia_interaction
final_model <- glm(formula, data = imputed5, family = binomial)
summary(final_model)
results <- data.frame(
  Variable = names(coef(final_model)),
  Coef = coef(final_model),
  OR = exp(coef(final_model)),
  p_value = summary(final_model)$coefficients[,4])
ci <- confint(final_model)
results$Lower_OR_CI <- exp(ci[,1]) 
results$Upper_OR_CI <- exp(ci[,2]) 
print(results)
library(rms)
dd <- datadist(imputed5)
options(datadist = "dd")
model_rcs <- lrm(Fasciotomy ~ Limb_Ischemia + rcs(K, 3) + rcs(CK, 3) + rcs(NEU, 3), data = imputed5)
anova(model_rcs) 

final_formula <- Fasciotomy ~ Limb_Ischemia + K + CK + rcs(NEU, 3)
final_model_optimized <- lrm(final_formula, 
                             data = imputed5,
                             x=TRUE,y=TRUE)
anova(final_model_optimized)
library(ggplot2)
pred_NEU <- Predict(final_model_optimized, NEU, fun = plogis)
pred_data <- data.frame(
  NEU = pred_NEU$NEU,
  Prob = pred_NEU$yhat,
  Lower = pred_NEU$lower,
  Upper = pred_NEU$upper)
ggplot(pred_data, aes(x = NEU, y = Prob)) +
  geom_line(color = "#CC0000", linewidth = 1) +  # 使用size=1兼容旧版本ggplot2
  geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "#CC0000") +
  labs(
    x = "Neutrophil Count (NEU, 10^9/L)",
    y = "Predicted Probability of Fasciotomy"
  ) +
  theme_minimal()

install.packages("rms")
library(rms)
nom1 <- nomogram(final_model_optimized,
                 fun = plogis,
                 lp = F,
                 fun.at = c(0.1, 0.3, 0.5, 0.7, 0.9, 0.99),
                 funlabel = "Risk for Fasciotomy")
plot(nom1)
pred_prob <- predict(final_model_optimized, type = "fitted")
summary(pred_prob)
hist(pred_prob, breaks = 50, main = "Predict probability distribution", xlab = "Predict probability")
event_rate <- mean(imputed5$Fasciotomy)
cat("event rate:", round(event_rate, 3))
library(pROC)
roc_obj <- roc(imputed5$Fasciotomy, predict(final_model_optimized, type = "fitted"))
auc_value <- auc(roc_obj)
cat("model AUC:", round(auc_value, 3))

library(rmda)
library(dplyr)
library(rmda)
model_dca <- decision_curve(
  final_formula, 
  data = imputed5,
  thresholds = seq(0, 1, by = 0.01),
  family = binomial(link = 'logit'),
  study.design = 'case-control',
  population.prevalence = event_rate)
plot_decision_curve(model_dca, 
                    curve.names = c('Nomogram'), 
                    xlim = c(0, 1.0),
                    cost.benefit.axis = FALSE, 
                    col = c('#CC0000'),
                    confidence.intervals = FALSE, 
                    standardize = FALSE)
plot_clinical_impact(model_dca, 
                     population.size = 1000, 
                     cost.benefit.axis = TRUE,
                     n.cost.benefits = 8, 
                     col = c('#CC0000', '#0000FF'),
                     confidence.intervals = FALSE)

library(pROC)
imputed5$predvalue<-predict(final_model_optimized)
modelROC <- roc(imputed5$Fasciotomy, imputed5$predvalue)
auc(modelROC)
ci(auc(modelROC))
c_index <- final_model_optimized$stats["C"]
cat("C-index:", round(c_index, 5), "\n")
plot(modelROC,
     col = "#CC0000", 
     print.thres = TRUE, 
     print.thres.pch = 19,
     print.thres.col = "black",
     lwd = 2, 
     xlab = "1 - Specificity",
     ylab = "Sensitivity",
     legacy.axes = TRUE) 
legend(0.55,0.25,
       c("AUC:0.877
(95%CI:0.819-0.934)"),
       lty = c(1),
       lwd = c(2),
       col = c("#CC0000"),
       bty = "n")
cal1<-calibrate(final_model_optimized, method = "boot", B=1000)
plot(cal1,
     xlim = c(0,1),
     xlab = "Prediced Probability",
     ylab = "Observed Probability",
     main = "Calibration Curve (Bootstrap-resampling)",
     legend = F,
     subtitles = T)
abline(0,1, col="black",lty=2,lwd=1)
lines(cal1[, c("predy", "calibrated.orig")], type = "l", lwd=1, col="#CC0000",pch=16)
lines(cal1[, c("predy", "calibrated.corrected")], type = "l", lwd=1, col="#0000FF",pch=16)
legend(0.55,0.35,
       c("Ideal","Apparent","Bias-corrected"),
       lty = c(2,1,1),
       lwd = c(1,1,1),
       col = c("black","#CC0000","#0000FF"),
       bty = "n")
library(ResourceSelection)
library(ggplot2)
pred_prob <- predict(final_model_optimized, type = "fitted")
hoslem_test <- hoslem.test(imputed5$Fasciotomy, pred_prob, g = 10)
print("Hosmer-Lemeshow:")
print(hoslem_test)
actual_outcomes <- imputed5$Fasciotomy
groups <- cut(pred_prob, 
              breaks = quantile(pred_prob, probs = seq(0, 1, 0.1)), 
              include.lowest = TRUE)
calibration_data <- data.frame(
  predicted = tapply(pred_prob, groups, mean),
  observed = tapply(actual_outcomes, groups, mean))

calibration_data$size <- tapply(actual_outcomes, groups, length)
plot(calibration_data$predicted, calibration_data$observed,
     xlim = c(0, 1), ylim = c(0, 1),
     xlab = "Predicted Probability",
     ylab = "Observed Probability",
     main = "Calibration Curve (Hosmer-Lemeshow)",
     col = "#CC0000", pch = 16, cex = 1.2)
abline(0, 1, col = "black", lty = 2, lwd = 1)
loess_fit <- loess(observed ~ predicted, data = calibration_data)
pred_grid <- seq(0, 1, length.out = 100)
lines(pred_grid, predict(loess_fit, newdata = data.frame(predicted = pred_grid)),
      col = "#0000FF", lwd = 1)
legend(0.5, 0.3,
       legend = c("Ideal", "Observed (HL Groups)", "Smoothed Trend"),
       col = c("black", "#CC0000", "#0000FF"),
       lty = c(2, NA, 1),
       pch = c(NA, 16, NA),
       lwd = c(1, NA, 2),
       bty = "n")
mtext(paste0("Hosmer-Lemeshow χ² = ", round(hoslem_test$statistic, 2),
             ", p = ", round(hoslem_test$p.value, 3)),
      side = 3, line = 0.5, cex = 0.8)

library(caret)
library(pROC)
str(imputed5$Fasciotomy)
imputed5$Fasciotomy <- factor(imputed5$Fasciotomy, levels = c(0, 1), labels = c("NFT.Group", "FT.Group"))
train_control <- trainControl(
  method = "cv", 
  number = 10,
  classProbs = TRUE, 
  summaryFunction = twoClassSummary)
cv_model <- train(
  final_formula, 
  data = imputed5, 
  method = "glm", 
  family = "binomial", 
  trControl = train_control,
  metric = "ROC")
print("cv result:")
print(cv_model)

library(boot)
library(logistf)
library(pROC)
imputed5_clean <- imputed5[, !colnames(imputed5) %in% c("Patient_ID", "K_CK_interaction", "Limb_Ischemia_NEU_interaction", "K_Limb_Ischemia_interaction")]
boot_auc <- function(data, indices) {
  d_train <- data[indices, ]
  d_test <- data[-unique(indices), ]
  if (nrow(d_test) == 0) {
    cat("Empty test set detected.\n")
    return(NA)}
  if (length(unique(d_test$Fasciotomy)) < 2) {
    cat("Single class in test set detected.\n")
    return(NA)}
  factor_vars <- sapply(d_train, is.factor)
  for (var in names(factor_vars)[factor_vars]) {
    levels(d_test[[var]]) <- levels(d_train[[var]])}
  model <- logistf(final_formula, data = d_train)
  if (is.null(model$coefficients)) {
    cat("Model failed to converge.\n")
    return(NA)}
  pred_prob <- predict(model, newdata = d_test, type = "response")
  roc_obj <- suppressMessages(roc(d_test$Fasciotomy, pred_prob, quiet = TRUE))
  return(auc(roc_obj))}
initial_model <- logistf(final_formula, data = imputed5_clean)
initial_pred_prob <- predict(initial_model, type = "response")
initial_auc <- auc(roc(imputed5_clean$Fasciotomy, initial_pred_prob, quiet = TRUE))
set.seed(123)
boot_results <- boot(data = imputed5_clean, 
                     statistic = boot_auc, 
                     R = 1000,
                     parallel = "multicore", 
                     ncpus = 4,
                     sim = "ordinary", 
                     stype = "i",
                     strata = imputed5_clean$Fasciotomy)
boot_results$t0 <- initial_auc
valid_auc <- boot_results$t[!is.na(boot_results$t)]
cat("Valid Bootstrap iterations:", length(valid_auc), "\n")
mean_auc <- mean(valid_auc)
boot_ci <- quantile(valid_auc, c(0.025, 0.975))
cat("Bootstrap AUC (95% CI):", 
    round(mean_auc, 3), 
    "[", round(boot_ci[1], 3), "-", 
    round(boot_ci[2], 3), "]\n")
hist(valid_auc, breaks = 30, 
     main = "Bootstrap AUC Distribution", 
     xlab = "AUC", 
     col = "#CC0000", 
     border = "white")
abline(v = mean_auc, col = "black", lty = 2, lwd = 2)
